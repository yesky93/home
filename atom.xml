<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/yesky93</id>
    <title>ToMars</title>
    <updated>2020-04-05T16:11:55.119Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/yesky93"/>
    <link rel="self" href="https://github.com/yesky93/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://github.com/yesky93/images/avatar.png</logo>
    <icon>https://github.com/yesky93/favicon.ico</icon>
    <rights>All rights reserved 2020, ToMars</rights>
    <entry>
        <title type="html"><![CDATA[Idea - FreeNote]]></title>
        <id>https://github.com/yesky93/post/2TMSXnpfz</id>
        <link href="https://github.com/yesky93/post/2TMSXnpfz">
        </link>
        <updated>2020-04-05T16:10:01.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>3D感 层次感</li>
<li>界面任意位置</li>
<li>当前按照目录结构整理的 Note太简单了</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Decentralized Mirco-Payment ]]></title>
        <id>https://github.com/yesky93/post/VGu6C7HJz</id>
        <link href="https://github.com/yesky93/post/VGu6C7HJz">
        </link>
        <updated>2020-04-01T21:35:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="背景">背景</h3>
<ul>
<li>小额度支付的手续费可能是其金额本身的几倍</li>
<li>高频场景下交易的效率问题</li>
</ul>
<h3 id="原理">原理</h3>
<ul>
<li>建立链上交易通道</li>
<li>发送链下ticket / lottery</li>
<li>接收方链上兑换</li>
</ul>
<h3 id="参考">参考</h3>
<ul>
<li>https://medium.com/@gustav.simonsson/ethereum-probabilistic-micropayments-ae6e6cd85a06</li>
<li>https://eprint.iacr.org/2016/1033.pdf</li>
<li>https://medium.com/livepeer-blog/streamflow-probabilistic-micropayments-f3a647672462</li>
<li><a href="https://etherscan.io/address/0xb02396f06cc894834b7934ecf8c8e5ab5c1d12f1#code">Orchid Protocol's Payment Contract</a></li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树莓派的文章]]></title>
        <id>https://github.com/yesky93/post/VazY4LJyY</id>
        <link href="https://github.com/yesky93/post/VazY4LJyY">
        </link>
        <updated>2020-04-01T20:14:30.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>https://mlapp.cn/376.html</li>
<li>https://zhuanlan.zhihu.com/p/107596869</li>
<li>https://zhuanlan.zhihu.com/p/61573634</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] 自定义JSON Encoder 和 json.tool对使用]]></title>
        <id>https://github.com/yesky93/post/K4ZnaJPX1</id>
        <link href="https://github.com/yesky93/post/K4ZnaJPX1">
        </link>
        <updated>2020-03-29T03:13:10.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>python只能对几种特定的类型进行json转换</li>
<li>需要使用JSONEncoder来指定转换方式</li>
</ul>
<pre><code>class CustomEncoder(json.JSONEncoder):
  def default(self, x):
    if isinstance(x, datetime):
      return int(x.timestamp())
    return super().default(self, x)

USER_DATA = dict(
  id = 1, name = 'wxnacy', ts = datetime.now()
)
print(json.dumps(USER_DATA, cls=CustomEncoder))
# {&quot;id&quot;: 1, &quot;name&quot;: &quot;wxnacy&quot;, &quot;ts&quot;: 1562938926}
</code></pre>
<pre><code>echo '{&quot;json&quot;: &quot;obj&quot;}' | python -m json.tool
</code></pre>
<h3 id="参考">参考</h3>
<ul>
<li>https://www.jb51.net/article/165378.htm</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linked Data and GraphQL]]></title>
        <id>https://github.com/yesky93/post/hKbZym-vI</id>
        <link href="https://github.com/yesky93/post/hKbZym-vI">
        </link>
        <updated>2020-03-25T22:08:00.000Z</updated>
        <content type="html"><![CDATA[<p>https://comunica.github.io/Article-ISWC2018-Demo-GraphQlLD/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IP 地址 224.0.0.1]]></title>
        <id>https://github.com/yesky93/post/Q0h4QsFID</id>
        <link href="https://github.com/yesky93/post/Q0h4QsFID">
        </link>
        <updated>2020-03-25T20:59:44.000Z</updated>
        <content type="html"><![CDATA[<p>224.0.0.1 所有主机的地址<br>
224.0.0.2 所有组播路由器的地址<br>
224.0.0.3 不分配</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过Github API v4学习GraphQL]]></title>
        <id>https://github.com/yesky93/post/i5jGXggk9</id>
        <link href="https://github.com/yesky93/post/i5jGXggk9">
        </link>
        <updated>2020-03-25T15:19:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="使用graphql的原因">使用GraphQL的原因</h3>
<ul>
<li>Strongly typed. The schema defines an API's type system and all object relationships.</li>
<li>Introspective. A client can query the schema for details about the schema</li>
<li>Hierarchical. The shape of a GraphQL call mirrors the shape of the JSON data it returns.</li>
<li>The API traverses and returns application data based on the schema definitions, independent of how the data is stored</li>
</ul>
<h3 id="graphql的定义">GraphQL的定义</h3>
<pre><code>An application layer. GraphQL is not a storage model or a database query language. The graph refers to graph structures defined in the schema, where nodes define objects and edges define relationships between objects.
</code></pre>
<h3 id="参考">参考</h3>
<ul>
<li>https://developer.github.com/v4/</li>
<li>https://rollout.io/blog/an-introduction-to-graphql-via-the-github-api/</li>
<li>https://developer.github.com/v4/guides/intro-to-graphql/#discovering-the-graphql-api</li>
<li>https://developer.github.com/v4/guides/intro-to-graphql/#node</li>
<li>https://medium.com/@int128/github-graphql-recepies-a3721709145b</li>
<li>https://blog.ssanj.net/posts/2017-07-30-querying-for-commits-on-master-using-github-graphql-api-v4.html</li>
<li>https://www.contentstack.com/docs/developers/use-the-graphql-queries-with-apollo-sdks/use-graphql-queries-with-apollo-client-javascript-sdk</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从Github API了解GIT]]></title>
        <id>https://github.com/yesky93/post/QbICAR6nN</id>
        <link href="https://github.com/yesky93/post/QbICAR6nN">
        </link>
        <updated>2020-03-22T15:33:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="数据结构">数据结构</h3>
<pre><code>type NodeEntry = {
    path: string,
    mode: string,
    type: &quot;blob&quot; | &quot;tree&quot;,
    sha: string,
    size?: number,
    url: string
}
</code></pre>
<h3 id="git是一种kv数据库">git是一种KV数据库</h3>
<pre><code>Git is a content-addressable filesystem. Great. What does that mean? It means that at the core of Git is a simple key-value data store. What this means is that you can insert any kind of content into a Git repository, for which Git will hand you back a unique key you can use later to retrieve that content.
</code></pre>
<ul>
<li>使用tree的概念管理数据
<ul>
<li>文件是tree, commits也是tree</li>
</ul>
</li>
<li>关于<code>mode</code>
<ul>
<li>&quot;In this case, you’re specifying a mode of 100644, which means it’s a normal file. Other options are 100755, which means it’s an executable file; and 120000, which specifies a symbolic link. The mode is taken from normal UNIX modes but is much less flexible — these three modes are the only ones that are valid for files (blobs) in Git (although other modes are used for directories and submodules).&quot;</li>
</ul>
</li>
</ul>
<h3 id="branch是一种snapshot的pointer">branch是一种snapshot的pointer</h3>
<pre><code>A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is master. As you start making commits, you’re given a master branch that points to the last commit you made. Every time you commit, the master branch pointer moves forward automatically.
</code></pre>
<h3 id="参考">参考</h3>
<ul>
<li>https://git-scm.com/book/en/v2/Git-Internals-Git-Objects</li>
<li>https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[isomorphic-git 使用总结]]></title>
        <id>https://github.com/yesky93/post/dX0iHfRCv</id>
        <link href="https://github.com/yesky93/post/dX0iHfRCv">
        </link>
        <updated>2020-03-22T15:04:35.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>在页面上使用indexDB来模拟文件系统</li>
</ul>
<h3 id="参考">参考</h3>
<ul>
<li>https://github.com/nodegit/nodegit</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[idea - 利用pyppeteer实现python版的excel]]></title>
        <id>https://github.com/yesky93/post/Up9brV0v1</id>
        <link href="https://github.com/yesky93/post/Up9brV0v1">
        </link>
        <updated>2020-03-16T18:57:32.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>https://pypi.org/project/pyppeteer/</li>
</ul>
]]></content>
    </entry>
</feed>